# models.py

from pydantic import BaseModel, Field
from typing import List, Dict, Optional
from datetime import datetime
from enums import ObjectType

# Define your Key, FloatCurve, AssetImportData, and ColorCurve models

class Key(BaseModel):
    interpMode: str
    tangentMode: str
    tangentWeightMode: str
    time: float
    value: float
    arriveTangent: float
    arriveTangentWeight: float
    leaveTangent: float
    leaveTangentWeight: float

class FloatCurve(BaseModel):
    keys: List[Key]
    defaultValue: float
    preInfinityExtrap: str
    postInfinityExtrap: str

class AssetImportData(BaseModel):
    _ClassName: str
    sourceData: Dict[str, str]

class TagWithConfidence(BaseModel):
    tag: str = Field(..., description="The tag label")
    confidence: float = Field(..., description="Confidence score associated with the tag")

class Annotation(BaseModel):
    id: str
    from_name: str
    to_name: str
    type: str
    origin: Optional[str]
    value: dict

class TaskData(BaseModel):
    id: int
    data: dict
    created_at: str
    updated_at: str
    is_labeled: bool
    project: int

class CompletedBy(BaseModel):
    id: int
    first_name: str
    last_name: str
    email: str

class LabelData(BaseModel):
    id: int
    result: List[Annotation]
    created_username: str
    completed_by: CompletedBy
    task: TaskData
    created_at: str
    updated_at: str
    project: int

class ColorCurveSearchModel(BaseModel):
    id: str = Field(..., description="Unique identifier for each object (Primary Key)")
    thumbnail_url: str = Field(..., description="URL to the thumbnail image stored in Azure Blob Storage")
    json_url: str = Field(..., description="URL to the JSON file stored in Azure Blob Storage")
    type: ObjectType = Field(..., description="Type of the object, e.g., 'colorcurve', 'grayscalefloatcurve'")
    curve_type_comp: str = Field(..., description="Lineage of curve generation by rgba curve types")
    thumbnail_size: Optional[int] = Field(None, description="File size of the thumbnail image in bytes")
    json_size: Optional[int] = Field(None, description="File size of the JSON file in bytes")
    thumbnail_dimensions: Optional[Dict[str, int]] = Field(
        {"width": 128, "height": 128},
        description="Dimensions of the thumbnail image"
    )
    human_description: Optional[str] = None  # Manually written description
    machine_description: Optional[str] = None  # AI-generated description
    human_tags_with_confidence: Optional[List[TagWithConfidence]] = Field(
        None,
        description="List of tags generated by humans, each with a confidence score"
    )
    computer_vision_tags_with_confidence: Optional[List[TagWithConfidence]] = Field(
        None,
        description="List of tags generated by computer vision algorithms, each with a confidence score"
    )
    nlp_keywords: Optional[List[str]] = Field(None, description="Keywords extracted for NLP-based querying")
    created_at: Optional[datetime] = None  # Timestamp when the object was created
    updated_at: Optional[datetime] = None  # Timestamp when the object was last updated
    index_version: Optional[str] = Field("v1", description="Version of the search index schema")


class SDFKColorCurve(BaseModel):
    uuid: str = Field(..., description="Unique identifier for each object. A UUID is used for uniqueness.")
    name: str
    description: Optional[str]
    human_description: Optional[str] = Field(None, description="Manually written description")
    machine_description: Optional[str] = Field(None, description="AI-generated description")
    human_tags_with_confidence: Optional[List[dict]] = Field(
        None,
        description="List of tags generated by humans, each with a confidence score"
    )
    computer_vision_tags_with_confidence: Optional[List[dict]] = Field(
        None,
        description="List of tags generated by computer vision algorithms, each with a confidence score"
    )
    nlp_keywords: Optional[List[str]] = Field(None, description="Keywords extracted for NLP-based querying")
    thumbnail_url: Optional[str] = Field(None, description="URL to the thumbnail image stored in Azure Blob Storage")
    curve_json_url: Optional[str] = Field(None, description="URL to the color curve JSON file stored in Azure Blob Storage")
    search_json_url: Optional[str] = Field(None, description="URL to the search metadata JSON file stored in Azure Blob Storage")
    R_float_curve_type: str
    R_resolution_scale: float
    R_noise_scale: float
    G_float_curve_type: str
    G_resolution_scale: float
    G_noise_scale: float
    B_float_curve_type: str
    B_resolution_scale: float
    B_noise_scale: float
    A_float_curve_type: str
    A_resolution_scale: float
    A_noise_scale: float
    meta_x_offset_curve_type: str
    meta_y_offset_curve_type: str
    meta_x_offset_scale: float
    meta_y_offset_scale: float
    meta_x_resolution_scale: float
    meta_y_resolution_scale: float
    meta_x_noise_scale: float
    meta_y_noise_scale: float
    created_at: datetime
    updated_at: datetime


    
class UEColorCurve(BaseModel):
    floatCurves: List[FloatCurve]
    adjustHue: float
    adjustSaturation: float
    adjustBrightness: float
    adjustBrightnessCurve: float
    adjustVibrance: float
    adjustMinAlpha: float
    adjustMaxAlpha: float
    assetImportData: Optional[AssetImportData]